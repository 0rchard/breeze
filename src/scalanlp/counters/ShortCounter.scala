// THIS IS AN AUTO-GENERATED CLASS. DO NOT MODIFY.    
// generated by GenCounter on Wed Jul 30 12:05:37 PDT 2008
package scalanlp.counters;

import scala.collection.mutable.Map;
import scala.collection.mutable.HashMap;

trait ShortCounter[T] extends Map[T,Short] {

  private var pTotal: Int = 0;

  def total() = pTotal;

  final protected def updateTotal(delta : Int) {
    pTotal += delta;
  }

  override def clear() {
    pTotal = 0;
    super.clear();
  }


  abstract override def update(k : T, v : Short) = {
    updateTotal(v - this(k))
    super.update(k,v);
  }

  // this isn't necessary, except that the jcl MapWrapper overrides put to call Java's put directly.
  override def put(k : T, v : Short) :Option[Short] = { val old = get(k); update(k,v); old}

  abstract override def -=(key : T) = {

    updateTotal(-this(key))

    super.-=(key);
  }
  override def default(k : T) : Short = 0;

  override def apply(k : T) : Short = super.apply(k);



  // TODO: clone doesn't seem to work. I think this is a JCL bug.
  override def clone(): ShortCounter[T]  = super.clone().asInstanceOf[ShortCounter[T]]

   def argmax() : T = (elements reduceLeft ((p1:(T,Short),p2:(T,Short)) => if (p1._2 > p2._2) p1 else p2))._1
   def argmin() : T = (elements reduceLeft ((p1:(T,Short),p2:(T,Short)) => if (p1._2 < p2._2) p1 else p2))._1

   def max : Short = values reduceLeft ((p1:Short,p2:Short) => if (p1 > p2) p1 else p2)
   def min : Short = values reduceLeft ((p1:Short,p2:Short) => if (p1 < p2) p1 else p2)

   def comparator(a : T, b :T) = apply(a) compare apply(b);

   def normalized : DoubleCounter[T] = {
    val normalized = new HashMap[T,Double]() with DoubleCounter[T];
    val total : Double = this.total
    for (pair <- elements) {
      normalized.put(pair._1,pair._2 / total)
    }
    normalized
  }

   def l2norm() : Double = {
    var norm = 0.0
    for (val v <- values) {
      norm += (v * v)
    }
    return Math.sqrt(norm)
  }

   def topK(k : Int) = Counters.topK[(T,Short)](k,(x,y) => (x._2-y._2).asInstanceOf[Int])(this);

  def dot(that : ShortCounter[T]) : Double = {
    var total = 0.0
    for (val (k,v) <- that.elements) {
      total += get(k).asInstanceOf[Double] * v
    }
    return total
  }

  def +=(that : ShortCounter[T]) {
    for(val (k,v) <- that.elements) {
      update(k,(this(k) + v).asInstanceOf[Short]);
    }
  }

   def +=(that : Iterable[(T,Short)]) {
    for(val (k,v) <- that) {
      this(k) = (this(k) + v).asInstanceOf[Short];
    }
  }


}


object ShortCounter {
  import it.unimi.dsi.fastutil.objects._
  import it.unimi.dsi.fastutil.ints._
  import it.unimi.dsi.fastutil.shorts._
  import it.unimi.dsi.fastutil.longs._
  import it.unimi.dsi.fastutil.floats._
  import it.unimi.dsi.fastutil.doubles._

  import scalanlp.counters.ints._
  import scalanlp.counters.shorts._
  import scalanlp.counters.longs._
  import scalanlp.counters.floats._
  import scalanlp.counters.doubles._


  import scala.collection.jcl.MapWrapper;
  def apply[T]() = new MapWrapper[T,Short] with ShortCounter[T] {
    private val under = new Object2ShortOpenHashMap[T];
    def underlying() = under.asInstanceOf[java.util.Map[T,Short]];
    override def apply(x : T) = under.getShort(x);
    override def update(x : T, v : Short) {
      val oldV = this(x);
      updateTotal(v-oldV);
      under.put(x,v);
    }
  }

  
  private def runtimeClass[T](x : Any) = x.asInstanceOf[AnyRef].getClass
  def apply[T](x : T) : ShortCounter[T] = {
    val INT = runtimeClass(3);
    val LNG = runtimeClass(3l);
    val FLT = runtimeClass(3.0f);
    val SHR = runtimeClass(3.asInstanceOf[Short]);
    val DBL = runtimeClass(3.0);
    runtimeClass(x) match {
      case INT => Int2ShortCounter().asInstanceOf[ShortCounter[T]];
      case DBL => Double2ShortCounter().asInstanceOf[ShortCounter[T]];
      case FLT => Float2ShortCounter().asInstanceOf[ShortCounter[T]];
      case SHR => Short2ShortCounter().asInstanceOf[ShortCounter[T]];
      case LNG => Long2ShortCounter().asInstanceOf[ShortCounter[T]];
      case _ => ShortCounter().asInstanceOf[ShortCounter[T]];
    }
  }
      
}

