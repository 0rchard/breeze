// THIS IS AN AUTO-GENERATED CLASS. DO NOT MODIFY.    
// generated by GenCounter on Wed Jul 30 12:05:37 PDT 2008
package scalanlp.counters.longs;

import scala.collection.mutable.Map;
import scala.collection.mutable.HashMap;

trait Long2FloatCounter extends FloatCounter[Long] {


  abstract override def update(k : Long, v : Float) = {

    super.update(k,v);
  }

  // this isn't necessary, except that the jcl MapWrapper overrides put to call Java's put directly.
  override def put(k : Long, v : Float) :Option[Float] = { val old = get(k); update(k,v); old}

  abstract override def -=(key : Long) = {

    super.-=(key);
  }
  override def default(k : Long) : Float = 0;

  override def apply(k : Long) : Float = super.apply(k);



  // TODO: clone doesn't seem to work. I think this is a JCL bug.
  override def clone(): Long2FloatCounter  = super.clone().asInstanceOf[Long2FloatCounter]

  override  def argmax() : Long = (elements reduceLeft ((p1:(Long,Float),p2:(Long,Float)) => if (p1._2 > p2._2) p1 else p2))._1
  override  def argmin() : Long = (elements reduceLeft ((p1:(Long,Float),p2:(Long,Float)) => if (p1._2 < p2._2) p1 else p2))._1

  override  def max : Float = values reduceLeft ((p1:Float,p2:Float) => if (p1 > p2) p1 else p2)
  override  def min : Float = values reduceLeft ((p1:Float,p2:Float) => if (p1 < p2) p1 else p2)

  override  def comparator(a : Long, b :Long) = apply(a) compare apply(b);

  override  def normalized : Long2DoubleCounter = {
    val normalized = new HashMap[Long,Double]() with Long2DoubleCounter;
    val total : Double = this.total
    for (pair <- elements) {
      normalized.put(pair._1,pair._2 / total)
    }
    normalized
  }

  override  def l2norm() : Double = {
    var norm = 0.0
    for (val v <- values) {
      norm += (v * v)
    }
    return Math.sqrt(norm)
  }

  override  def topK(k : Int) = Counters.topK[(Long,Float)](k,(x,y) => (x._2-y._2).asInstanceOf[Int])(this);

  def dot(that : Long2FloatCounter) : Double = {
    var total = 0.0
    for (val (k,v) <- that.elements) {
      total += get(k).asInstanceOf[Double] * v
    }
    return total
  }

  def +=(that : Long2FloatCounter) {
    for(val (k,v) <- that.elements) {
      update(k,(this(k) + v).asInstanceOf[Float]);
    }
  }

  override  def +=(that : Iterable[(Long,Float)]) {
    for(val (k,v) <- that) {
      this(k) = (this(k) + v).asInstanceOf[Float];
    }
  }


}


object Long2FloatCounter {
  import it.unimi.dsi.fastutil.objects._
  import it.unimi.dsi.fastutil.ints._
  import it.unimi.dsi.fastutil.shorts._
  import it.unimi.dsi.fastutil.longs._
  import it.unimi.dsi.fastutil.floats._
  import it.unimi.dsi.fastutil.doubles._


  import scala.collection.jcl.MapWrapper;
  def apply() = new MapWrapper[Long,Float] with Long2FloatCounter {
    private val under = new Long2FloatOpenHashMap;
    def underlying() = under.asInstanceOf[java.util.Map[Long,Float]];
    override def apply(x : Long) = under.get(x);
    override def update(x : Long, v : Float) {
      val oldV = this(x);
      updateTotal(v-oldV);
      under.put(x,v);
    }
  }

  
}

