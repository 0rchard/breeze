// THIS IS AN AUTO-GENERATED CLASS. DO NOT MODIFY.    
// generated by GenCounter on Wed Jul 30 12:05:37 PDT 2008
package scalanlp.counters.doubles;

import scala.collection.mutable.Map;
import scala.collection.mutable.HashMap;

trait Double2IntCounter extends IntCounter[Double] {


  abstract override def update(k : Double, v : Int) = {

    super.update(k,v);
  }

  // this isn't necessary, except that the jcl MapWrapper overrides put to call Java's put directly.
  override def put(k : Double, v : Int) :Option[Int] = { val old = get(k); update(k,v); old}

  abstract override def -=(key : Double) = {

    super.-=(key);
  }
  override def default(k : Double) : Int = 0;

  override def apply(k : Double) : Int = super.apply(k);



  // TODO: clone doesn't seem to work. I think this is a JCL bug.
  override def clone(): Double2IntCounter  = super.clone().asInstanceOf[Double2IntCounter]

  override  def argmax() : Double = (elements reduceLeft ((p1:(Double,Int),p2:(Double,Int)) => if (p1._2 > p2._2) p1 else p2))._1
  override  def argmin() : Double = (elements reduceLeft ((p1:(Double,Int),p2:(Double,Int)) => if (p1._2 < p2._2) p1 else p2))._1

  override  def max : Int = values reduceLeft ((p1:Int,p2:Int) => if (p1 > p2) p1 else p2)
  override  def min : Int = values reduceLeft ((p1:Int,p2:Int) => if (p1 < p2) p1 else p2)

  override  def comparator(a : Double, b :Double) = apply(a) compare apply(b);

  override  def normalized : Double2DoubleCounter = {
    val normalized = new HashMap[Double,Double]() with Double2DoubleCounter;
    val total : Double = this.total
    for (pair <- elements) {
      normalized.put(pair._1,pair._2 / total)
    }
    normalized
  }

  override  def l2norm() : Double = {
    var norm = 0.0
    for (val v <- values) {
      norm += (v * v)
    }
    return Math.sqrt(norm)
  }

  override  def topK(k : Int) = Counters.topK[(Double,Int)](k,(x,y) => (x._2-y._2).asInstanceOf[Int])(this);

  def dot(that : Double2IntCounter) : Double = {
    var total = 0.0
    for (val (k,v) <- that.elements) {
      total += get(k).asInstanceOf[Double] * v
    }
    return total
  }

  def +=(that : Double2IntCounter) {
    for(val (k,v) <- that.elements) {
      update(k,(this(k) + v).asInstanceOf[Int]);
    }
  }

  override  def +=(that : Iterable[(Double,Int)]) {
    for(val (k,v) <- that) {
      this(k) = (this(k) + v).asInstanceOf[Int];
    }
  }


}


object Double2IntCounter {
  import it.unimi.dsi.fastutil.objects._
  import it.unimi.dsi.fastutil.ints._
  import it.unimi.dsi.fastutil.shorts._
  import it.unimi.dsi.fastutil.longs._
  import it.unimi.dsi.fastutil.floats._
  import it.unimi.dsi.fastutil.doubles._


  import scala.collection.jcl.MapWrapper;
  def apply() = new MapWrapper[Double,Int] with Double2IntCounter {
    private val under = new Double2IntOpenHashMap;
    def underlying() = under.asInstanceOf[java.util.Map[Double,Int]];
    override def apply(x : Double) = under.get(x);
    override def update(x : Double, v : Int) {
      val oldV = this(x);
      updateTotal(v-oldV);
      under.put(x,v);
    }
  }

  
}

