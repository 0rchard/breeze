// script to generate counter classes of the appropriate kinds
object GenCounter {
  val valueTypes = List("Int","Double","Float","Short","Long");
  val keyTypes =  None :: valueTypes.map(Some[String]);

  def main(args: Array[String]) {
    import java.io.{File, FileWriter};
    if (args.length != 1) {
      println("please give path of output directory")
      exit(-1)
    }

    for(k <-keyTypes;
      v<- valueTypes) {
      val dir = new File(args(0) + File.separator + mkPath(k,v));
      dir.mkdirs();
      val f = new File(dir + File.separator + mkName(k,v).replaceAll("\\[T\\]","") + ".scala");
      f.createNewFile();
      val out = new FileWriter(f);
      println(mkName(k,v));
      out.write(mkCounter(k,v));
      out.close();
    }
  }

  def mkPath(key : Option[String], value:String) = {
    val dir = "scalanlp/counters" + (key match {
      case Some(k) => "/" + k.toLowerCase + "s/";
      case None => "/"
    })
    dir
  }
  def mkFastMap(key : Option[String], value:String) = {
    val prefix = key match {
      case Some(k) => k + "2"+ value
      case None => "Object2" + value
    }

    prefix + "OpenHashMap" + (key match {
      case Some(k) => ""
      case None => "[T]"
    })
  }
  def mkName(key : Option[String], value:String) = {
    val prefix = key match {
      case Some(k) => k + "2"+ value
      case None => value
    }

    prefix + "Counter" + (key match {
      case Some(k) => ""
      case None => "[T]"
    })
  }

  def mkCounter(key : Option[String], value : String) = {
    val V = value;
    val T = key.getOrElse("T");
    val sizeType = value match {
      case "Byte" | "Char" | "Short" => "Int"
      case x => x
    }

    val isGeneric = key.isEmpty;

    val PACKAGE = key match {
      case None => "scalanlp.counters";
      case Some(k) => "scalanlp.counters." + k.toLowerCase + "s";
    }

    val superClass = if(isGeneric) {
      "Map[" + T + ","+V+"]"
    } else {
      V + "Counter["+T+"]";
    }

    val hasCounterParent  = !isGeneric

    val ov = if(hasCounterParent) "override " else "";

    val DOUBLE_COUNTER = mkName(key,"Double");
    val COUNTER = mkName(key,value);
<x>// THIS IS AN AUTO-GENERATED CLASS. DO NOT MODIFY.    
// generated by GenCounter on {new java.util.Date().toString()}
package {PACKAGE};

import scala.collection.mutable.Map;
import scala.collection.mutable.HashMap;

trait {COUNTER} extends {superClass} {{
{if(!hasCounterParent) {
  <x>
  private var pTotal: {sizeType} = 0;

  def total() = pTotal;

  final protected def updateTotal(delta : {sizeType}) {{
    pTotal += delta;
  }}

  override def clear() {{
    pTotal = 0;
    super.clear();
  }}
</x>.text
} else {""}}

  abstract override def update(k : {T}, v : {V}) = {{
{if(!hasCounterParent) { <x>    updateTotal(v - this(k))</x>.text } else {""}}
    super.update(k,v);
  }}

  // this isn't necessary, except that the jcl MapWrapper overrides put to call Java's put directly.
  override def put(k : {T}, v : {V}) :Option[{V}] = {{ val old = get(k); update(k,v); old}}

  abstract override def -=(key : {T}) = {{
{if(!hasCounterParent) {
  <x>
    updateTotal(-this(key))
</x>.text
} else {""}}
    super.-=(key);
  }}
  override def default(k : {T}) : {V} = 0;

  override def apply(k : {T}) : {V} = super.apply(k);



  // TODO: clone doesn't seem to work. I think this is a JCL bug.
  override def clone(): {COUNTER}  = super.clone().asInstanceOf[{COUNTER}]

  {ov} def argmax() : {T} = (elements reduceLeft ((p1:({T},{V}),p2:({T},{V})) => if (p1._2 &gt; p2._2) p1 else p2))._1
  {ov} def argmin() : {T} = (elements reduceLeft ((p1:({T},{V}),p2:({T},{V})) => if (p1._2 &lt; p2._2) p1 else p2))._1

  {ov} def max : {V} = values reduceLeft ((p1:{V},p2:{V}) => if (p1 > p2) p1 else p2)
  {ov} def min : {V} = values reduceLeft ((p1:{V},p2:{V}) => if (p1 &lt; p2) p1 else p2)

  {ov} def comparator(a : {T}, b :{T}) = apply(a) compare apply(b);

  {ov} def normalized : {DOUBLE_COUNTER} = {{
    val normalized = new HashMap[{T},Double]() with {DOUBLE_COUNTER};
    val total : Double = this.total
    for (pair &lt;- elements) {{
      normalized.put(pair._1,pair._2 / total)
    }}
    normalized
  }}

  {ov} def l2norm() : Double = {{
    var norm = 0.0
    for (val v &lt;- values) {{
      norm += (v * v)
    }}
    return Math.sqrt(norm)
  }}

  {ov} def topK(k : Int) = Counters.topK[({T},{V})](k,(x,y) => (x._2-y._2).asInstanceOf[Int])(this);

  def dot(that : {COUNTER}) : Double = {{
    var total = 0.0
    for (val (k,v) &lt;- that.elements) {{
      total += get(k).asInstanceOf[Double] * v
    }}
    return total
  }}

  def +=(that : {COUNTER}) {{
    for(val (k,v) &lt;- that.elements) {{
      update(k,(this(k) + v).asInstanceOf[{V}]);
    }}
  }}

  {ov} def +=(that : Iterable[({T},{V})]) {{
    for(val (k,v) &lt;- that) {{
      this(k) = (this(k) + v).asInstanceOf[{V}];
    }}
  }}


}}


object {COUNTER.replaceAll("\\[T\\]","")} {{
  import it.unimi.dsi.fastutil.objects._
  import it.unimi.dsi.fastutil.ints._
  import it.unimi.dsi.fastutil.shorts._
  import it.unimi.dsi.fastutil.longs._
  import it.unimi.dsi.fastutil.floats._
  import it.unimi.dsi.fastutil.doubles._
{if(isGeneric) {<x>
  import scalanlp.counters.ints._
  import scalanlp.counters.shorts._
  import scalanlp.counters.longs._
  import scalanlp.counters.floats._
  import scalanlp.counters.doubles._
</x>.text} 
else ""
}

  import scala.collection.jcl.MapWrapper;
  def apply{if(isGeneric) "[T]" else ""}() = new MapWrapper[{T},{V}] with {COUNTER} {{
    private val under = new {mkFastMap(key,value)};
    def underlying() = under.asInstanceOf[java.util.Map[{T},{V}]];
    {// fastutil says getInt for Object2IntMap and just get for Int2IntMap
      if(isGeneric) <x>override def apply(x : {T}) = under.get{V}(x);</x>.text
      else <x>override def apply(x : {T}) = under.get(x);</x>.text
    }
    override def update(x : {T}, v : {V}) {{
      val oldV = this(x);
      updateTotal(v-oldV);
      under.put(x,v);
    }}
  }}

  {
    if(!hasCounterParent) 
      <x>
  private def runtimeClass[T](x : Any) = x.asInstanceOf[AnyRef].getClass
  def apply[T](x : T) : {V}Counter[T] = {{
    val INT = runtimeClass(3);
    val LNG = runtimeClass(3l);
    val FLT = runtimeClass(3.0f);
    val SHR = runtimeClass(3.asInstanceOf[Short]);
    val DBL = runtimeClass(3.0);
    runtimeClass(x) match {{
      case INT => Int2{V}Counter().asInstanceOf[{V}Counter[T]];
      case DBL => Double2{V}Counter().asInstanceOf[{V}Counter[T]];
      case FLT => Float2{V}Counter().asInstanceOf[{V}Counter[T]];
      case SHR => Short2{V}Counter().asInstanceOf[{V}Counter[T]];
      case LNG => Long2{V}Counter().asInstanceOf[{V}Counter[T]];
      case _ => {V}Counter().asInstanceOf[{V}Counter[T]];
    }}
  }}
      </x>.text
    else ""  
  }
}}

</x>.text
    
  }

}


GenCounter.main(args);
