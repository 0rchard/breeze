This document describes several of the major components of the 0.2 release of ScalaNLP-core. It's intended as something of an overview, and not a reference, for that, see the scaladocs.

= Important Packages =

== <tt>counters</tt> == 

The counters package provides one of the
essential tools in NLP.  Counters are basicaly HashMaps with a
numerically typed value.  (The current implementations support
Doubles and Ints). They're used to represent high-dimensional but
sparse values, such as statistics for particular words or other
features. 

Creating counters can be done in a number of ways.
<code>
  scala> import scalanlp.counters.Counters._;
  import scalanlp.counters.Counters._
</code>

First, you can just count things:
<code>
  scala> count(1,2,3)
  res0: scalanlp.counters.Counters.IntCounter[Int] = 
  scalanlp.counters.Counters$DefaultIntCounter[domain=Set(1, 2, 3) active=3 default=0]
  ((1,1)
   (2,1)
   (3,1))
 
 scala> val a = List(1,2,3);
 a: List[Int] = List(1, 2, 3)
 
 scala> count(a)
 res1: scalanlp.counters.Counters.IntCounter[Int] = 
 scalanlp.counters.Counters$DefaultIntCounter[domain=Set(1, 2, 3) active=3 default=0]
  ((1,1)
   (2,1)
   (3,1))
</code>
  
You can also aggregate pairs of doubles:

<code>
 scala> aggregate( (1,2.0), (2,3.0), (3,4.0) )
 res2: scalanlp.counters.Counters.DoubleCounter[Int] = 
 scalanlp.counters.Counters$DefaultDoubleCounter[domain=Set(1, 2, 3) active=3 default=0.0]
  ((1,2.0)
   (2,3.0)
   (3,4.0))
<code/>

You can also just create a Double or IntCounter. (Note there is no 'new'!)

<code>
  scala> val c = IntCounter[String]()
  c: scalanlp.counters.Counters.IntCounter[String] = 
  scalanlp.counters.Counters$DefaultIntCounter[domain=Set() active=0 default=0]
   ()
 
  scala> c("Hello") = 1
 
  scala> c
  res5: scalanlp.counters.Counters.IntCounter[String] = 
  scalanlp.counters.Counters$DefaultIntCounter[domain=Set(Hello) active=0 default=0]
   ((Hello,1))
</code>

Counters know their size (number of non-default valued
keys), default value, and the total of all values in the counter.
Note that it's actually possible to create counters that know other
statistics.

<code>
  scala> val b = count(1,2,3,4,1,1)
  b: scalanlp.counters.Counters.IntCounter[Int] = 
  scalanlp.counters.Counters$DefaultIntCounter[domain=Set(1, 2, 3, 4) active=4 default=0]
   ((1,3)
    (2,1)
    (3,1)
    (4,1))
 
  scala> b.total
  res6: Double = 6.0
</code>

=== PairedCounters ===

A closely related class is PairedDoubleCounter, which is basically
the same except that it is a map from pairs of something to another
type: (K1,K2)=>V.

<code>
  scala> val mat = PairedDoubleCounter[String,Int]();
  mat: scalanlp.counters.Counters.PairedDoubleCounter[String,Int] = []

  scala> mat("3",4) = 5.0; mat("hi!",3) = 6.0

  scala> mat
  res8: scalanlp.counters.Counters.PairedDoubleCounter[String,Int] = 
  [((3,4),5.0),
  ((hi!,3),6.0),
  ]
 
  scala> mat.total
  res9: Double = 11.0
</code>

PairedCounters also provide access to a K2=>V
counter, which modify the internals of the PairedDoubleCounter.

<code>
  scala> mat("hi!")
  res10: mat.DoubleCounter = 
  scalanlp.counters.Counters$$anon$1[domain=Set(3) active=1 default=0.0]
   ((3,6.0))
 
  scala> res10(6) = 11.0
 
  scala> mat
  res14: scalanlp.counters.Counters.PairedDoubleCounter[String,Int] = 
  [((3,4),5.0),
  ((hi!,3),6.0),
  ((hi!,6),11.0),
  ]
</code>
 
=== Matrix Operations ===
Another important facet of (Double)Counters is that they are also Tensors
from the Scalala linear algebra library. This means that we get
things like matrix multiplication (PairedCounter * PairedCounter) for free.

For instance:
<code>
  scala> val y = PairedDoubleCounter[Int,Double]();                     
  y: scalanlp.counters.Counters.PairedDoubleCounter[Int,Double] = []
 
  scala> val x = PairedDoubleCounter[String,Int]();                     
  x: scalanlp.counters.Counters.PairedDoubleCounter[String,Int] = []
 
  scala> x("4",2) = 5; x("hi!",2) = 7;                                  
  scala> y(2,1.0) = 42; y(2,42.0) = 3                                   
 
  scala> x
  res0: scalanlp.counters.Counters.PairedDoubleCounter[String,Int] = 
  [((hi!,2),7.0),
  ((4,2),5.0),
  ]
 
  scala> y
  res1: scalanlp.counters.Counters.PairedDoubleCounter[Int,Double] = 
  [((2,1.0),42.0),
  ((2,42.0),3.0),
  ]
 
  scala> x * y value
  res2: scalanlp.counters.Counters.PairedDoubleCounter[String,Double] = 
  [((hi!,1.0),294.0),
  ((hi!,42.0),21.0),
  ((4,1.0),210.0),
  ((4,42.0),15.0),
  ]
</code>

Most operations you can do to a Matrix you can do a PairedDoubleCounter,
and most things you can do to a Vector you can do to a DoubleCounter.

== stats.sampling ==

The sampling package is perhaps misnamed: it includes probability distributions as well as sampling routines. The approach taken is to encode 
random number generators as a "monad", which means that they can be used in Scala for-comprehensions to create new random generators and compose them together. For example:

<code>
  scala> val negativeUniform = for( u <- Rand.uniform) yield -u;
  negativeUniform: java.lang.Object with scalanlp.stats.sampling.Rand[Double] = scalanlp.stats.sampling.Rand$$anon$2@7464fb1c

  scala> negativeUniform.sample(10);      
  res2: List[Double] = List(-0.9948667414804051, -0.764770938027298, -0.27058341922450935, -0.5039489357855411, -0.5015343989361816, -0.8086984114692559, -0.33986204710236756, -0.525708716460873, -0.7617271434909493, -0.3807598326703686)

  scala> val gaussian = for( u <- Rand.uniform; y <- Rand.gaussian(u*10,3.1)) yield y;
  gaussian: java.lang.Object with scalanlp.stats.sampling.Rand[Double] = scalanlp.stats.sampling.Rand$$anon$1@71f2ba86

  scala> gaussian.sample(10);                                                         
  res4: List[Double] = List(3.601680497677195, 9.641105620362563, 13.517084845628528, 5.1039313703021225, 9.603679995565999, 1.2025990320986235, -3.3313072838776305, -1.4768403442753342, 5.619392993190006, 4.803988692726058)
</code>

For those of you used to the concept, for comprehensions let you
write "generative stories" for new random data. If you're not, just
think of these comprehensions as ways of writing little programs for generating random numbers.

Rejection sampling (or conditioning) is also easy. For instance, to sample a random odd number:
<code>
  scala> val odd = for(x <- Rand.randInt if x % 2 == 1) yield x;         
  odd: java.lang.Object with scalanlp.stats.sampling.Rand[Int] = scalanlp.stats.sampling.Rand$$anon$2@69b56985

  scala> odd.sample(10) 
  res20: List[Int] = List(2081979581, 729930353, 51800603, 1265418507, 1793688113, 1424445529, 1552890847, 97942263, 275586065, 1748560459)
</code>

=== Distributions ===

ScalaNLP also provides a fairly large number of probability distributions built
in. These come with access to either probability density function (for discrete
distributions) or pdf functions (for continuous distributions). Many
distributions also have methods for giving the mean and the variance.

<code>
  scala> val poi = new Poisson(3.0);
  poi: scalanlp.stats.sampling.Poisson = <function1>

  scala> poi.sample(10);
  res21: List[Int] = List(3, 5, 5, 2, 2, 1, 1, 2, 4, 1)

  scala> res21 map { poi.probabilityOf(_) }
  res23: List[Double] = List(0.6721254229661636, 0.504094067224622, 0.504094067224622, 0.44808361531077556, 0.44808361531077556, 0.1493612051035918, 0.1493612051035918, 0.44808361531077556, 0.6721254229661628, 0.1493612051035918)
  
  scala> val doublePoi = for(x <- poi) yield x.toDouble; // meanAndVariance requires doubles, but Poisson samples over Ints
  doublePoi: java.lang.Object with scalanlp.stats.sampling.Rand[Double] = scalanlp.stats.sampling.Rand$$anon$2@2c98070c

  scala> scalanlp.stats.DescriptiveStats.meanAndVariance(doublePoi.samples.take(1000));
  res29: (Double, Double) = (3.018,2.9666426426426447)

  scala> (poi.mean,poi.variance)
  res30: (Double, Double) = (3.0,3.0)
</code>

The sampling package also has limited support for conjugate priors:

<code>

scala> val gam = new Gamma(2.0,1.0) with Gamma.PoissonPrior;
gam: scalanlp.stats.sampling.Gamma with scalanlp.stats.sampling.Gamma.PoissonPrior = <function1>

scala> gam.mean
res32: Double = 2.0

scala> val poiSamples = poi.sample(10);
poiSamples: List[Int] = List(2, 2, 1, 3, 6, 3, 2, 3, 3, 3)

scala> val posterior = gam.posterior(scalanlp.counters.Counters.count(poiSamples))
posterior: scalanlp.stats.sampling.Gamma.PoissonPosterior = <function1>

scala> posterior.mean
res41: Double = 2.7272727272727275

</code>
