This document describes several of the major components of the 0.2 release of ScalaNLP-core. It's intended as something of an overview, and not a reference, for that, see the scaladocs.

= Important Packages =

== <tt>counters</tt> == 

The counters package provides one of the
essential tools in NLP.  Counters are basicaly HashMaps with a
numerically typed value.  (The current implementations support
Doubles and Ints). They're used to represent high-dimensional but
sparse values, such as statistics for particular words or other
features. 

Creating counters can be done in a number of ways.
<code>
  scala> import scalanlp.counters.Counters._;
  import scalanlp.counters.Counters._
</code>

First, you can just count things:
<code>
  scala> count(1,2,3)
  res0: scalanlp.counters.Counters.IntCounter[Int] = 
  scalanlp.counters.Counters$DefaultIntCounter[domain=Set(1, 2, 3) active=3 default=0]
  ((1,1)
   (2,1)
   (3,1))
 
 scala> val a = List(1,2,3);
 a: List[Int] = List(1, 2, 3)
 
 scala> count(a)
 res1: scalanlp.counters.Counters.IntCounter[Int] = 
 scalanlp.counters.Counters$DefaultIntCounter[domain=Set(1, 2, 3) active=3 default=0]
  ((1,1)
   (2,1)
   (3,1))
</code>
  
You can also aggregate pairs of doubles:

<code>
 scala> aggregate( (1,2.0), (2,3.0), (3,4.0) )
 res2: scalanlp.counters.Counters.DoubleCounter[Int] = 
 scalanlp.counters.Counters$DefaultDoubleCounter[domain=Set(1, 2, 3) active=3 default=0.0]
  ((1,2.0)
   (2,3.0)
   (3,4.0))
<code/>

You can also just create a Double or IntCounter. (Note there is no 'new'!)

<code>
  scala> val c = IntCounter[String]()
  c: scalanlp.counters.Counters.IntCounter[String] = 
  scalanlp.counters.Counters$DefaultIntCounter[domain=Set() active=0 default=0]
   ()
 
  scala> c("Hello") = 1
 
  scala> c
  res5: scalanlp.counters.Counters.IntCounter[String] = 
  scalanlp.counters.Counters$DefaultIntCounter[domain=Set(Hello) active=0 default=0]
   ((Hello,1))
</code>

Counters know their size (number of non-default valued
keys), default value, and the total of all values in the counter.
Note that it's actually possible to create counters that know other
statistics.

<code>
  scala> val b = count(1,2,3,4,1,1)
  b: scalanlp.counters.Counters.IntCounter[Int] = 
  scalanlp.counters.Counters$DefaultIntCounter[domain=Set(1, 2, 3, 4) active=4 default=0]
   ((1,3)
    (2,1)
    (3,1)
    (4,1))
 
  scala> b.total
  res6: Double = 6.0
</code>

=== PairedCounters ===

A closely related class is PairedDoubleCounter, which is basically
the same except that it is a map from pairs of something to another
type: (K1,K2)=>V.

<code>
  scala> val mat = PairedDoubleCounter[String,Int]();
  mat: scalanlp.counters.Counters.PairedDoubleCounter[String,Int] = []

  scala> mat("3",4) = 5.0; mat("hi!",3) = 6.0

  scala> mat
  res8: scalanlp.counters.Counters.PairedDoubleCounter[String,Int] = 
  [((3,4),5.0),
  ((hi!,3),6.0),
  ]
 
  scala> mat.total
  res9: Double = 11.0
</code>

PairedCounters also provide access to a K2=>V
counter, which modify the internals of the PairedDoubleCounter.

<code>
  scala> mat("hi!")
  res10: mat.DoubleCounter = 
  scalanlp.counters.Counters$$anon$1[domain=Set(3) active=1 default=0.0]
   ((3,6.0))
 
  scala> res10(6) = 11.0
 
  scala> mat
  res14: scalanlp.counters.Counters.PairedDoubleCounter[String,Int] = 
  [((3,4),5.0),
  ((hi!,3),6.0),
  ((hi!,6),11.0),
  ]
</code>
 
=== Matrix Operations ===
Another important facet of (Double)Counters is that they are also Tensors
from the Scalala linear algebra library. This means that we get
things like matrix multiplication (PairedCounter * PairedCounter) for free.

For instance:
<code>
  scala> val y = PairedDoubleCounter[Int,Double]();                     
  y: scalanlp.counters.Counters.PairedDoubleCounter[Int,Double] = []
 
  scala> val x = PairedDoubleCounter[String,Int]();                     
  x: scalanlp.counters.Counters.PairedDoubleCounter[String,Int] = []
 
  scala> x("4",2) = 5; x("hi!",2) = 7;                                  
  scala> y(2,1.0) = 42; y(2,42.0) = 3                                   
 
  scala> x
  res0: scalanlp.counters.Counters.PairedDoubleCounter[String,Int] = 
  [((hi!,2),7.0),
  ((4,2),5.0),
  ]
 
  scala> y
  res1: scalanlp.counters.Counters.PairedDoubleCounter[Int,Double] = 
  [((2,1.0),42.0),
  ((2,42.0),3.0),
  ]
 
  scala> x * y value
  res2: scalanlp.counters.Counters.PairedDoubleCounter[String,Double] = 
  [((hi!,1.0),294.0),
  ((hi!,42.0),21.0),
  ((4,1.0),210.0),
  ((4,42.0),15.0),
  ]
</code>

Most operations you can do to a Matrix you can do a PairedDoubleCounter,
and most things you can do to a Vector you can do to a DoubleCounter.

== stats.sampling ==

